// Generated by gencpp from file airsim_bridge/ImageMosaicer.msg
// DO NOT EDIT!


#ifndef AIRSIM_BRIDGE_MESSAGE_IMAGEMOSAICER_H
#define AIRSIM_BRIDGE_MESSAGE_IMAGEMOSAICER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/CompressedImage.h>

namespace airsim_bridge
{
template <class ContainerAllocator>
struct ImageMosaicer_
{
  typedef ImageMosaicer_<ContainerAllocator> Type;

  ImageMosaicer_()
    : header()
    , id(0)
    , uav(0)
    , grafo(0)
    , edges()
    , tx(0.0)
    , ty(0.0)
    , theta(0.0)
    , scale(0.0)
    , theta_offset(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , camera_type()
    , filename()
    , image()  {
    }
  ImageMosaicer_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , uav(0)
    , grafo(0)
    , edges(_alloc)
    , tx(0.0)
    , ty(0.0)
    , theta(0.0)
    , scale(0.0)
    , theta_offset(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , camera_type(_alloc)
    , filename(_alloc)
    , image(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _uav_type;
  _uav_type uav;

   typedef int32_t _grafo_type;
  _grafo_type grafo;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _edges_type;
  _edges_type edges;

   typedef float _tx_type;
  _tx_type tx;

   typedef float _ty_type;
  _ty_type ty;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _scale_type;
  _scale_type scale;

   typedef float _theta_offset_type;
  _theta_offset_type theta_offset;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_type_type;
  _camera_type_type camera_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _image_type;
  _image_type image;





  typedef boost::shared_ptr< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> const> ConstPtr;

}; // struct ImageMosaicer_

typedef ::airsim_bridge::ImageMosaicer_<std::allocator<void> > ImageMosaicer;

typedef boost::shared_ptr< ::airsim_bridge::ImageMosaicer > ImageMosaicerPtr;
typedef boost::shared_ptr< ::airsim_bridge::ImageMosaicer const> ImageMosaicerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_bridge::ImageMosaicer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace airsim_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'airsim_bridge': ['/home/exbot/catkin_ws/src/airsim_bridge/msg', '/home/exbot/catkin_ws/src/airsim_bridge/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1b370e85b8d0c6f3643c249518d4ae9";
  }

  static const char* value(const ::airsim_bridge::ImageMosaicer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1b370e85b8d0c6fULL;
  static const uint64_t static_value2 = 0x3643c249518d4ae9ULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_bridge/ImageMosaicer";
  }

  static const char* value(const ::airsim_bridge::ImageMosaicer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 id\n\
int32 uav\n\
int32 grafo\n\
int32[] edges\n\
float32 tx\n\
float32 ty\n\
float32 theta\n\
float32 scale\n\
float32 theta_offset\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
float64 heading\n\
float64 pitch\n\
float64 roll\n\
string camera_type\n\
string  filename\n\
sensor_msgs/CompressedImage image\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/CompressedImage\n\
# This message contains a compressed image\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
\n\
string format        # Specifies the format of the data\n\
                     #   Acceptable values:\n\
                     #     jpeg, png\n\
uint8[] data         # Compressed image buffer\n\
";
  }

  static const char* value(const ::airsim_bridge::ImageMosaicer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.uav);
      stream.next(m.grafo);
      stream.next(m.edges);
      stream.next(m.tx);
      stream.next(m.ty);
      stream.next(m.theta);
      stream.next(m.scale);
      stream.next(m.theta_offset);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.camera_type);
      stream.next(m.filename);
      stream.next(m.image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageMosaicer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_bridge::ImageMosaicer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_bridge::ImageMosaicer_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "uav: ";
    Printer<int32_t>::stream(s, indent + "  ", v.uav);
    s << indent << "grafo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.grafo);
    s << indent << "edges[]" << std::endl;
    for (size_t i = 0; i < v.edges.size(); ++i)
    {
      s << indent << "  edges[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.edges[i]);
    }
    s << indent << "tx: ";
    Printer<float>::stream(s, indent + "  ", v.tx);
    s << indent << "ty: ";
    Printer<float>::stream(s, indent + "  ", v.ty);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "scale: ";
    Printer<float>::stream(s, indent + "  ", v.scale);
    s << indent << "theta_offset: ";
    Printer<float>::stream(s, indent + "  ", v.theta_offset);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "camera_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_type);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_BRIDGE_MESSAGE_IMAGEMOSAICER_H
